// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6yVUW+jRhDHv8pqem+HbUxc68JbW0uVVaWKLvcWUmnNDvFeze52dricFfHdqwVsY0wu",
	"iXQvCYZh5r/z/83wDLktnTVo2EP6DD7fYimbyzVjGf47sg6JNfr2l84xXCj0OWnH2hpI4csWBVuWO9EE",
	"CCf3qERhSfBWe6EZyylEgN9l6XYIKSyni2uIwElmpJDhnyxTH7NsmmXqOak/QAS8dyHSM2nzCHUEfmuJ",
	"V/26YzLuQpS4JauqnEUvvJODI2pubGVYaiNW+CTmye1f59Lus+wpy3yWTR4+jiirIyD8r9KECtL7S5lR",
	"17WH45t28xVzDmf6jDlqx5eNDiLPLz4QFpDCL7OTZbPOr1ljVh1Bqc26jZ8fi0kiuQ8PXUX5VnpcSX7B",
	"QiUZhS2aLh2ig6OGUQlrmvvUKj5vYBInySSeT+I5RFBYKiVDCiHdmJGH1F90+RJLunyzEJEsJltbUfsS",
	"fneYM6pzffOr9FxaiB2TRshS75DGZRl5knWIFJaEZ0vYFyW0FwXZIWZZFcfJ8kb8YckgiRtJ/yK/xFob",
	"PEpcBM2w/WgOZRmYFk7qHzv3/kEc4H7s2ACwgc1RB/JB+uUwhMTaFPbyVL8Jr4PcY3cd2Ry9t6Eoa24O",
	"0k1SmPzjs29Ivk0xn8bTODTOOjTSaUjhahpPr9qjb5sBm3Xp/azL30yl9Xyp6K7alJq9kEdJYbl0r4Uu",
	"NYVIhvC1ghRuredOoe8UQttH9Py7VftQI7eG0TTlpHM7nTfvz776dte1w/7aKjhslPrcKKYKmxveWePb",
	"HZPE8bvKDjaUCn9PJEm1WW5+XcaTGLGYLJJNPrlW8+VEFYtPxVWMn643yZC0uzfsU61egOXcks/IFRnf",
	"kL5eCem9fjSoBNs+/AGBRXvsy8npDa823+ROq0aMr8pS0v4ttofwE0bPWtUzZ3X3cX3EEZL6sttQIZ8k",
	"qePn8yR9yNSfeERqrW7bMqG/JEtkJA/p/dgp16vTCjsk1uFhGASIICw5SEPbh/xEfRZet/Hhp+J26uMR",
	"uXkc91a6NrxcnGSEb8UjUmPJq/A0y70qN2GdFwMfWmQWl9b9bXsYVOZgmGRxAc47XK7ruv4/AAD///2p",
	"zauXCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
